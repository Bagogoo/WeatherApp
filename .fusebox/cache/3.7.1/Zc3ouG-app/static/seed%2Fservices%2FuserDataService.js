module.exports = { contents: "\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.users = void 0;\r\nconst base = {\r\n    address: 'http://localhost:3000',\r\n    query(domain, query, variables) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const res = yield fetch(`${this.address}/${domain}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ query, variables })\r\n            });\r\n            if (res.status === 404) {\r\n                throw Error(yield res.text());\r\n            }\r\n            const json = yield res.json();\r\n            if (json.errors) {\r\n                throw Error(json.errors[0].message);\r\n            }\r\n            return json.data;\r\n        });\r\n    }\r\n};\r\nexports.users = {\r\n    register(email, password, confirmation) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return yield base.query('user', `\r\n    mutation{\r\n      register(email: \"${email}\",\r\n         password:\"${password}\",\r\n         confirmation:\"${confirmation}\"){\r\n          ukey,\r\n          confirm_token\r\n      }\r\n    }\r\n    `);\r\n        });\r\n    },\r\n    login(email, password) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const user = yield base.query('user', `\r\n    mutation{\r\n      login(email:\"${email}\", password:\"${password}\"){\r\n       ukey,\r\n       access_token\r\n     }\r\n   }\r\n    `);\r\n            return user;\r\n        });\r\n    },\r\n    getProfile(ukey) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (ukey != null) {\r\n                const profile = yield base.query('user', `query{\r\n      profile(ukey: \"${ukey}\"){\r\n        ukey\r\n        cities\r\n      }\r\n    }`);\r\n                return profile;\r\n            }\r\n        });\r\n    }\r\n};\r\n//# sourceMappingURL=userDataService.js.map",
dependencies: [],
sourceMap: "{\"version\":3,\"file\":\"seed/services/userDataService.js\",\"sourceRoot\":\"../../\",\"sources\":[\"src/seed/services/userDataService.ts\"],\"names\":[],\"mappings\":\";;;;;;;;;;;;AAsCA,MAAM,IAAI,GAAS;IACjB,OAAO,EAAE,uBAAuB;IAC1B,KAAK,CAAoB,MAAW,EAAE,KAAU,EAAE,SAAc;;YACpE,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,IAAI,MAAM,EAAE,EAAE;gBACnD,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;iBACnC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;aAC3C,CAAC,CAAC;YAEH,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;gBACtB,MAAM,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;aAC/B;YAED,MAAM,IAAI,GAA4B,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;YAEvD,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;aACrC;YAED,OAAO,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;KAAA;CACF,CAAC;AAEW,QAAA,KAAK,GAAG;IACb,QAAQ,CAAC,KAAa,EAAE,QAAgB,EAAE,YAAoB;;YAClE,OAAO,MAAM,IAAI,CAAC,KAAK,CAAO,MAAM,EAAE;;yBAEjB,KAAK;qBACT,QAAQ;yBACJ,YAAY;;;;;KAKhC,CAAC,CAAA;QACJ,CAAC;KAAA;IACK,KAAK,CAAC,KAAa,EAAE,QAAgB;;YACzC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAgB,MAAM,EAAE;;qBAEpC,KAAK,gBAAgB,QAAQ;;;;;KAK7C,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IACK,UAAU,CAAC,IAAY;;YAC3B,IAAI,IAAI,IAAI,IAAI,EAAE;gBAChB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAU,MAAM,EAAE;uBACjC,IAAI;;;;MAIrB,CAAC,CAAC;gBACF,OAAO,OAAO,CAAC;aAChB;QACH,CAAC;KAAA;CACF,CAAA\",\"sourcesContent\":[\"import { getParsedCommandLineOfConfigFile } from \\\"typescript\\\";\\r\\n\\r\\ninterface GraphQLError {\\r\\n  message: string;\\r\\n}\\r\\n\\r\\nexport interface GraphQLQueryResponse<T extends {} = {}> {\\r\\n  data: T;\\r\\n  errors?: GraphQLError[];\\r\\n}\\r\\n\\r\\nexport interface User {\\r\\n  ukey: string,\\r\\n  access_token: string\\r\\n}\\r\\n\\r\\nexport interface LoginResponse {\\r\\n  login: {\\r\\n      access_token: string;\\r\\n      ukey: string;\\r\\n  }\\r\\n}\\r\\nexport interface Profile {\\r\\n  profile: {\\r\\n    ukey: string;\\r\\n    cities: string;\\r\\n  }\\r\\n}\\r\\nexport interface RegisterResponse {\\r\\n  ukey: string,\\r\\n  confirm_token: string\\r\\n}\\r\\n\\r\\ninterface Base {\\r\\n  address: string;\\r\\n  query<T extends {} = {}>(domain: string, query: string, variables?: {}): Promise<T>;\\r\\n}\\r\\n\\r\\nconst base: Base = {\\r\\n  address: 'http://localhost:3000',\\r\\n  async query<T extends {} = {}>(domain: any, query: any, variables: any) {\\r\\n    const res = await fetch(`${this.address}/${domain}`, {\\r\\n      method: 'POST',\\r\\n      headers: {\\r\\n        'Content-Type': 'application/json'\\r\\n      },\\r\\n      body: JSON.stringify({ query, variables })\\r\\n    });\\r\\n\\r\\n    if (res.status === 404) {\\r\\n      throw Error(await res.text());\\r\\n    }\\r\\n\\r\\n    const json: GraphQLQueryResponse<T> = await res.json();\\r\\n\\r\\n    if (json.errors) {\\r\\n      throw Error(json.errors[0].message);\\r\\n    }\\r\\n\\r\\n    return json.data;\\r\\n  }\\r\\n};\\r\\n\\r\\nexport const users = {\\r\\n  async register(email: string, password: string, confirmation: string) {\\r\\n    return await base.query<User>('user', `\\r\\n    mutation{\\r\\n      register(email: \\\"${email}\\\",\\r\\n         password:\\\"${password}\\\",\\r\\n         confirmation:\\\"${confirmation}\\\"){\\r\\n          ukey,\\r\\n          confirm_token\\r\\n      }\\r\\n    }\\r\\n    `)\\r\\n  },\\r\\n  async login(email: string, password: string) {\\r\\n    const user = await base.query<LoginResponse>('user', `\\r\\n    mutation{\\r\\n      login(email:\\\"${email}\\\", password:\\\"${password}\\\"){\\r\\n       ukey,\\r\\n       access_token\\r\\n     }\\r\\n   }\\r\\n    `);\\r\\n    \\r\\n    return user;\\r\\n  },\\r\\n  async getProfile(ukey: string) {\\r\\n    if (ukey != null) {\\r\\n      const profile = await base.query<Profile>('user', `query{\\r\\n      profile(ukey: \\\"${ukey}\\\"){\\r\\n        ukey\\r\\n        cities\\r\\n      }\\r\\n    }`);\\r\\n      return profile;\\r\\n    }\\r\\n  }\\r\\n}\"]}",
headerContent: undefined,
mtime: 1627389015398,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
